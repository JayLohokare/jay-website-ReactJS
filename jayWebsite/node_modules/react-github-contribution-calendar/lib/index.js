'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _elementResizeDetector = require('element-resize-detector');

var _elementResizeDetector2 = _interopRequireDefault(_elementResizeDetector);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var GitHubCalendar = function (_React$Component) {
  _inherits(GitHubCalendar, _React$Component);

  function GitHubCalendar() {
    _classCallCheck(this, GitHubCalendar);

    var _this = _possibleConstructorReturn(this, (GitHubCalendar.__proto__ || Object.getPrototypeOf(GitHubCalendar)).call(this));

    _this.monthLabelHeight = 15;
    _this.weekLabelWidth = 15;
    _this.panelSize = 11;
    _this.panelMargin = 2;

    // handle resize
    _this.elementResizeDetector = (0, _elementResizeDetector2.default)({ strategy: "scroll" });
    _this.resizeHandler = function () {
      return _this.updateSize();
    };

    _this.state = {
      columns: 53,
      maxWidth: 53
    };
    return _this;
  }

  _createClass(GitHubCalendar, [{
    key: 'getPanelPosition',
    value: function getPanelPosition(row, col) {
      var bounds = this.panelSize + this.panelMargin;
      return {
        x: this.weekLabelWidth + bounds * row,
        y: this.monthLabelHeight + bounds * col
      };
    }
  }, {
    key: 'makeCalendarData',
    value: function makeCalendarData(history, lastDay, columns) {
      var lastWeekend = new Date(lastDay);
      lastWeekend.setDate(lastWeekend.getDate() + (6 - lastWeekend.getDay()));

      var _endDate = (0, _moment2.default)(lastDay, 'YYYY-MM-DD');
      _endDate.add(1, 'days');
      _endDate.subtract(1, 'milliseconds');

      var result = [];
      for (var i = 0; i < columns; i++) {
        result[i] = [];
        for (var j = 0; j < 7; j++) {
          var date = new Date(lastWeekend);
          date.setDate(date.getDate() - ((columns - i - 1) * 7 + (6 - j)));

          var momentDate = (0, _moment2.default)(date);
          if (momentDate < _endDate) {
            var key = momentDate.format('YYYY-MM-DD');
            result[i][j] = {
              value: history[key] || 0,
              date: date
            };
          } else {
            result[i][j] = null;
          }
        }
      }

      return result;
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.elementResizeDetector.listenTo(this.refs.calendarContainer, this.resizeHandler);
      this.updateSize();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.elementResizeDetector.uninstall(this.refs.calendarContainer);
    }
  }, {
    key: 'render',
    value: function render() {
      var columns = this.state.columns;
      var values = this.props.values;
      var until = this.props.until;

      var contributions = this.makeCalendarData(values, until, columns);
      var innerDom = [];

      // panels
      for (var i = 0; i < columns; i++) {
        for (var j = 0; j < 7; j++) {
          var contribution = contributions[i][j];
          if (contribution === null) continue;
          var pos = this.getPanelPosition(i, j);
          var color = this.props.panelColors[contribution.value];
          var dom = _react2.default.createElement('rect', {
            key: 'panel_key_' + i + '_' + j,
            x: pos.x,
            y: pos.y,
            width: this.panelSize,
            height: this.panelSize,
            fill: color
          });
          innerDom.push(dom);
        }
      }

      // week texts
      for (var i = 0; i < this.props.weekNames.length; i++) {
        var _textBasePos = this.getPanelPosition(0, i);
        var _dom = _react2.default.createElement(
          'text',
          {
            key: 'week_key_' + i,
            className: 'week',
            x: _textBasePos.x - this.panelSize / 2 - 2,
            y: _textBasePos.y + this.panelSize / 2,
            textAnchor: 'middle' },
          this.props.weekNames[i]
        );
        innerDom.push(_dom);
      }

      // month texts
      var prevMonth = -1;
      for (var i = 0; i < columns; i++) {
        if (contributions[i][0] === null) continue;
        var month = contributions[i][0].date.getMonth();
        if (month != prevMonth) {
          var textBasePos = this.getPanelPosition(i, 0);
          innerDom.push(_react2.default.createElement(
            'text',
            {
              key: 'month_key_' + i,
              className: 'month',
              x: textBasePos.x + this.panelSize / 2,
              y: textBasePos.y - this.panelSize / 2 - 2,
              textAnchor: 'middle' },
            this.props.monthNames[month]
          ));
        }
        prevMonth = month;
      }

      return _react2.default.createElement(
        'div',
        { ref: 'calendarContainer', className: 'calendar-wrapper' },
        _react2.default.createElement(
          'svg',
          { className: 'calendar', height: '110' },
          innerDom
        )
      );
    }
  }, {
    key: 'updateSize',
    value: function updateSize() {
      var width = this.refs.calendarContainer.offsetWidth;
      var visibleWeeks = Math.floor((width - this.weekLabelWidth) / 13);
      this.setState({
        columns: Math.min(visibleWeeks, this.state.maxWidth)
      });
    }
  }]);

  return GitHubCalendar;
}(_react2.default.Component);

exports.default = GitHubCalendar;
;

GitHubCalendar.defaultProps = {
  weekNames: ['', 'M', '', 'W', '', 'F', ''],
  monthNames: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
  panelColors: ['#EEE', '#DDD', '#AAA', '#444']
};